"""
A script to obtain the Ashlock Fingerprints of all strategies in the Axelrod
library.

This writes a hash of the source code of each strategy to file: db.csv.

If the source code of a strategy changes **or** a new strategy is introduced
then the fingerprint is regenerated for that strategy.
"""

import inspect
import hashlib
import csv
import string

import axelrod as axl

def hash_strategy(strategy):
    """
    Hash the source code of a strategy
    """
    try:
        source_code = "".join(inspect.getsourcelines(strategy)[0])
    except OSError:  # Some classes are dynamically created
        source_code = "".join(inspect.getsourcelines(strategy.strategy)[0])
    hash_object = hashlib.md5(source_code.encode('utf-8'))
    hashed_source = hash_object.hexdigest()
    return hashed_source

def write_strategy_to_db(strategy, filename="db.csv"):
    """
    Write the hash of a strategy to the db
    """
    hashed_source = hash_strategy(strategy)
    with open(filename, "a") as db:
        db.write("{},{}\n".format(strategy.name, hashed_source))

def read_db(filename="db.csv"):
    """
    Read filename and return a dictionary mapping string names to hash of source
    code of a strategy
    """
    with open(filename, "r") as db:
        csvreader = csv.reader(db)
        str_to_hash = {row[0]: row[1] for row in csvreader}
    return str_to_hash

def write_data_to_file(fp, filename):
    """
    Write the fingerprint data to a file.
    """
    columns = ['x', 'y', 'score']

    with open(filename, 'w') as f:
        w = csv.writer(f)
        w.writerow(columns)
        for key, value in fp.data.items():
            w.writerow([key.x, key.y, value])


def obtain_fingerprint(strategy, turns, repetitions, probe=axl.TitForTat):
    """
	Obtain the fingerprint for a given strategy and save the figure to the
    assets dir
    """
    fp = axl.AshlockFingerprint(strategy, probe)
    fp.fingerprint(turns=turns, repetitions=repetitions,
                   progress_bar=False, processes=0)
    plot = fp.plot()
    plot.savefig("assets/{}.png".format(format_filename(strategy.name)))
    write_data_to_file(fp,
                       "assets/{}.csv".format(format_filename(strategy.name)))

def format_filename(s):
    """
    Take a string and return a valid filename constructed from the string.
    Uses a whitelist approach: any characters not present in valid_chars are
    removed. Also spaces are replaced with underscores.

    Note: this method may produce invalid filenames such as ``, `.` or `..`
    When I use this method I prepend a date string like '2009_01_15_19_46_32_'
    and append a file extension like '.txt', so I avoid the potential of using
    an invalid filename.

    Borrowed from https://gist.github.com/seanh/93666
    """
    valid_chars = "-_.() {}{}".format(string.ascii_letters, string.digits)
    filename = ''.join(c for c in s if c in valid_chars)
    filename = filename.replace(' ','_')
    return filename

def write_markdown(strategy):
    """
    Write a markdown section of a strategy.

    """
    markdown = """

## {0}

![fingerprint of {0}](./assets/{1}.png)

[data (csv)](./assets/{1}.csv)
    """.format(strategy.name, format_filename(strategy.name))
    return markdown

def main(turns, repetitions):
    """
    Fingerprint all strategies, if a strategy has already been fingerprinted it
    does not get rerun.
    """
    version = axl.__version__

    markdown = """# Ashlock fingerprints

See:
[axelrod.readthedocs.io/en/latest/tutorials/further_topics/fingerprinting.html#fingerprinting] (http://axelrod.readthedocs.io/en/latest/tutorials/further_topics/fingerprinting.html#fingerprinting)

All strategies included from Axelrod version {}.

This README.md file is autogenerated by running:

```
$ python update_fingerprints.py
```

Each individual fingerprint can be obtained by running:

```python
import axelrod as axl
fp = axl.AshlockFingerprint(strategy, probe)
fp.fingerprint(turns={}, repetitions={})
fp.plot()
```
    """.format(version, turns, repetitions)

    db = read_db()
    for strategy in axl.strategies:
        name = strategy.name
        signature = hash_strategy(strategy)
        if name not in db or db[name] != signature:
            obtain_fingerprint(strategy, turns, repetitions)
            write_strategy_to_db(strategy)
        markdown += write_markdown(strategy)

    with open("README.md", "w") as outfile:
        outfile.write(markdown)


if __name__ == "__main__":
    turns, repetitions = 200, 100
    main(turns, repetitions)
